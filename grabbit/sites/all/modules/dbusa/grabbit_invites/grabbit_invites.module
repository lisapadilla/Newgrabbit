<?

/**
 * Implementation of hook_menu()
 */
function grabbit_invites_menu()
{
  $items['grabbit/invite/twitter'] = array( 
    'title' => 'Invite Twitter', 
    'page callback' => 'grabbit_invites_twitter', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  ); 

  $items['grabbit/invite/facebook'] = array( 
    'title' => 'Invite Facebook', 
    'page callback' => 'grabbit_invites_facebook', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
 
  $items['devtest'] = array( 
    'title' => 'Invite Facebook', 
    'page callback' => 'grabbit_invites_test', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

 return $items;

}

function grabbit_invites_twitter(){
	
	global $user;
    $accounts = oauth_twitter_get_uid($user->uid);

	if($accounts){
		$id=arg(3);

		if($id){
			
				$module_name='oauth_twitter';
				include_once drupal_get_path('module', $module_name).'/includes/EpiCurl.php';
				include_once drupal_get_path('module', $module_name).'/includes/EpiOAuth.php';
				include_once drupal_get_path('module', $module_name).'/includes/EpiTwitter.php';
				include drupal_get_path('module', $module_name).'/includes/secret.php';
				
             try{
				$twitterObj = new EpiTwitter($consumer_key, $consumer_secret);
				$token = unserialize($accounts->config);
				$twitterObj->setToken($token['token'], $token['secret']);
				
				$invite = grabbit_invites_send_invite($id,'Invite to join grabbit','Join grabbit');
				$template = t(_grabbit_invites_get_mail_tweet());
				$tokens = _invite_token_types($invite);
				$message = token_replace_multiple($template, $tokens);
			

				$twitterObj->post_statusesUpdate(array('status' =>'D '.$id.' '.$message));
                invite_save($invite);
				print "You have invited this user to join Grabbit, we will notify you after your friend accepts your invitation.";
				}
			 	catch(EpiOAuthBadRequestException $e){  
			        drupal_set_message("Connection error Twitter","error");
			     }catch(EpiOAuthUnauthorizedException $e){  
			        drupal_set_message("Error in Twitter","error");
			     }catch(EpiOAuthException $e){  
			        drupal_set_message("Ooops! some strange error with twitter, maybe fail wale!","error");
			     }
		}
	
	}
	
}

function grabbit_invites_facebook(){
	
	global $user;
	
	$fuser = facebook_grabbit_get_fid($user->uid);
	
	if ($fuser && arg(3) && arg(4)){
	  $module_name='facebook_grabbit';
	  require_once(drupal_get_path('module', $module_name)."/facebook/facebook.php");
	  require_once(drupal_get_path('module', $module_name)."/facebook/facebook_desktop.php");
	  include(drupal_get_path('module', $module_name)."/facebook/config.php");

	  $suser=$fuser->fid;
	  $session_key=$fuser->kid;
      try{
	
	    $facebook = new FacebookDesktop($api_key, $secret);
	
	    if ($facebook->set_user($suser, $session_key) != null){
		  drupal_set_message("Facebook connection failed","error");
	    }
	    else{
		
		 	$invite = grabbit_invites_send_invite(arg(4),'Invite to join grabbit','Join grabbit');
			$template = t(_grabbit_invites_get_mail());
			$tokens = _invite_token_types($invite);
			$message = token_replace_multiple($template, $tokens);
		
				$testing = $facebook->api_client->call_method('facebook.notifications.send', array('api_key' => $api_key,
										       'to_ids'=>arg(3),
										       'notification'=>$message,
										));	
			if($testing){
				invite_save($invite);
				print "You have invited this user to join Grabbit, we will notify you after your friend accepts your invitation."; 
			}else{
				print "You have no invitations left for FACEBOOK today, pleace come back tomorrow";
			}
		
	        						
											
	    }
	  }catch(FacebookRestClientException $e){
		print "Facebook requests are currently being worked on. Thank you for your patience!";
	  }
    }
	
}

function grabbit_invites_send_invite($user,$subject,$message){
	$code = invite_generate_code();
    $invite = _invite_substitutions(array(
      'email' => $user,
      'code'  => $code,
      'resent'  => 0,
      'data'  => array('subject' => $subject, 'message' => $message),
    ));

    return $invite;

}

/**
 * Returns the configured or default e-mail template.
 *
 * @return
 *   The localized e-mail body.
 */
function _grabbit_invites_get_mail() {
  $template = t("Your friend, [inviter-raw], has invited you to join [site-name] at <a href='[join-link]'>[join-link]</a>");

  return $template;
}

function _grabbit_invites_get_mail_tweet() {
  $template = t("Hey! join [site-name] at [join-link]");

  return $template;
}

function grabbit_invites_get_invited($name){
	global $user;
	
	$result = db_result(db_query("SELECT reg_code FROM {invite} WHERE email = '%s' AND canceled=0 AND uid=%d",$name,$user->uid));

    if(db_affected_rows($result)){
	  	if($result->joined){
          return 2;
	    }else{
          return $result;
	    }
    }else{
	  return 0;
    }
}

function grabbit_invites_check_facebook_user($facebook){
    global $user;
	$result=db_query("SELECT * FROM {facebook_grabbit} WHERE fid=%d",$facebook['uid']);
	$joined="Joined grabbit!";
	while($face_user=db_fetch_object($result)){
		if($face_user->fid==$facebook['uid']){
		  	$amigo=user_load(array('uid'=>$face_user->uid));
			$joined=l('Joined grabbit!','users/'.$amigo->name);
		    if($amigo->status==1){
			  $status = friendlist_api_relation_status_calculate($user->uid, $amigo->uid, 1);

			  switch($status){
			  case 'TW_BOTH':
			    $friends='<strong>You are grabbit friends!</strong>';
			    $action ='&raquo;';
			    $action .='<span class="joined-action">'.l('remove from friends', 'friendlist/delete/'.$amigo->uid.'/1',array('query'=>'destination=user/me/myfriends')) .'</span>';
			    $class = 'grabbit-friends';
			    if(grabbit_favorites_get('friend',$amigo->uid)){
				  	$favs='<span class="flag-wrapper flag-bookmarks"><a href="JavaScript:void(0);" class="friend_favorite-remove friend-action" uid="'.$amigo->uid.'">Add to favorites</a></span>';	
				}else{
					$favs='<span class="flag-wrapper flag-bookmarks"><a href="JavaScript:void(0);" class="friend_favorite friend-action" uid="'.$amigo->uid.'">Remove from favorites</a></span>';
				}
			  break;
			  case 'TW_1_TO_2_P':
			    $friends='Your friend request is pending';
			    $class = 'request-pending';
			  break;
			  case 'TW_2_TO_1_P':
			    $friends='He requested you to be friends in grabbit!';
			    $action = '&raquo;';
			    $action .= l('accept friend request', 'friendlist/add/'.$amigo->uid.'/1',array('query'=>'destination=user/me/myfriends'));
			    $class = 'accept-pending';
			  break;	
			  default:
		        $friends=l('send friend request', 'friendlist/add/'.$amigo->uid.'/1',array('query'=>'destination=user/me/myfriends'));
		        $class = 'no-request';
			  break;
			  }
		    }
		    return array('joined'=>$joined,'friends'=>$friends,'action'=>$action,'class'=>$class, 'favs'=>$favs);	
		}else{
			return 0;
		}
	}
	
	return 0;
	
}

function grabbit_invites_check_twitter_user( $twitter )
{
  //$twitter['uid'] = '25586649';
  
    global $user;
	$result = db_query("SELECT * FROM {oauth_twitter} WHERE config LIKE '%%%d%%'", $twitter->id);
	$joined = "Joined grabbit!";
	while($tw_user=db_fetch_object($result)){
		$amigo=user_load(array('uid'=>$tw_user->uid));
		$joined=l('Joined grabbit!','users/'.$amigo->name);
	    if($amigo->status==1){
		  $status = friendlist_api_relation_status_calculate($user->uid, $amigo->uid, 1);
		  
		  switch($status){
		  case 'TW_BOTH':
		    $friends='<strong>You are grabbit friends!</strong>';
		    $action ='&raquo;';
		    $action .='<span class="joined-action">'.l('remove from friends', 'friendlist/delete/'.$amigo->uid.'/1',array('query'=>'destination=user/me/myfriends')) .'</span>';
		    $class = 'grabbit-friends';
		    if(grabbit_favorites_get('friend',$amigo->uid)){
			  	$favs='<span class="flag-wrapper flag-bookmarks"><a href="JavaScript:void(0);" class="friend_favorite-remove friend-action" uid="'.$amigo->uid.'">Add to favorites</a></span>';	
			}else{
				$favs='<span class="flag-wrapper flag-bookmarks"><a href="JavaScript:void(0);" class="friend_favorite friend-action" uid="'.$amigo->uid.'">Remove from favorites</a></span>';
			}
		  break;
		  case 'TW_1_TO_2_P':
		    $friends='Your friend request is pending';
		    $class = 'request-pending';
		  break;
		  case 'TW_2_TO_1_P':
		    $friends='He requested you to be friends in grabbit!';
		    $action = '&raquo;';
		    $action .= l('accept friend request', 'friendlist/add/'.$amigo->uid.'/1',array('query'=>'destination=user/me/myfriends'));
		    $class= 'accept-pending';
		  break;	
		  default:
	        $friends=l('Send friend request!', 'friendlist/add/'.$amigo->uid.'/1',array('query'=>'destination=user/me/myfriends'));
	        $class='no-request';
		  break;
		  }
	    }
	  return array('joined'=>$joined,'friends'=>$friends,'action'=>$action,'class'=>$class,'favs'=>$favs);
	}
	
	return 0;
	
}


function grabbit_invites_get_contacts(){
	global $user;
	$result=db_query("SELECT * FROM {invite} WHERE uid=%d AND canceled=0",$user->uid);
	$contacts = array();
	while($invite=db_fetch_object($result)){
		if(validEmail($invite->email)){
			
			if($invite->invitee){
			  	$amigo=user_load(array('uid'=>$invite->invitee));
			    if($amigo->status==1){
				  $status = friendlist_api_relation_status_calculate($user->uid, $amigo->uid, 1);

				  switch($status){
				  case 'TW_BOTH':
				    $friends='<strong>You are grabbit friends!</strong>';
				    $action ='&raquo;';
				    $action .='<span class="joined-action">'.l('remove from friends', 'friendlist/delete/'.$amigo->uid.'/1',array('query'=>'destination=user/me/myfriends')) .'</span>';
				    $class = 'grabbit-friends';
				    if(grabbit_favorites_get('friend',$amigo->uid)){
					  	$favs='<span class="flag-wrapper flag-bookmarks"><a href="JavaScript:void(0);" class="friend_favorite-remove friend-action" uid="'.$amigo->uid.'">Add to favorites</a></span>';	
					}else{
						$favs='<span class="flag-wrapper flag-bookmarks"><a href="JavaScript:void(0);" class="friend_favorite friend-action" uid="'.$amigo->uid.'">Remove from favorites</a></span>';
					}
				  break;
				  case 'TW_1_TO_2_P':
				    $friends='Your friend request is pending';
				    $class = 'request-pending';
				  break;
				  case 'TW_2_TO_1_P':
				    $friends='He requested you to be friends in grabbit!';
				    $class = 'accept-pending';
				  break;	
				  default:
			        $friends=l('Send friend request!', 'friendlist/add/'.$amigo->uid.'/1',array('query'=>'destination=user/me/myfriends'));
			        $class = 'no-request';
				  break;
				  }
			    }	
			}
		  $invite->friends=$friends;
		  $invite->link_class=$class;
		  $contacts[$invite->email]=$invite;
			
		}
	}
	
	return $contacts;
	
}

/*
Validate an email address.
Provide email address (raw input)
Returns true if the email address has the email 
address format and the domain exists.
*/
function validEmail($email)
{
   $isValid = true;
   $atIndex = strrpos($email, "@");
   if (is_bool($atIndex) && !$atIndex)
   {
      $isValid = false;
   }
   else
   {
      $domain = substr($email, $atIndex+1);
      $local = substr($email, 0, $atIndex);
      $localLen = strlen($local);
      $domainLen = strlen($domain);
      if ($localLen < 1 || $localLen > 64)
      {
         // local part length exceeded
         $isValid = false;
      }
      else if ($domainLen < 1 || $domainLen > 255)
      {
         // domain part length exceeded
         $isValid = false;
      }
      else if ($local[0] == '.' || $local[$localLen-1] == '.')
      {
         // local part starts or ends with '.'
         $isValid = false;
      }
      else if (preg_match('/\\.\\./', $local))
      {
         // local part has two consecutive dots
         $isValid = false;
      }
      else if (!preg_match('/^[A-Za-z0-9\\-\\.]+$/', $domain))
      {
         // character not valid in domain part
         $isValid = false;
      }
      else if (preg_match('/\\.\\./', $domain))
      {
         // domain part has two consecutive dots
         $isValid = false;
      }
      else if
(!preg_match('/^(\\\\.|[A-Za-z0-9!#%&`_=\\/$\'*+?^{}|~.-])+$/',
                 str_replace("\\\\","",$local)))
      {
         // character not valid in local part unless 
         // local part is quoted
         if (!preg_match('/^"(\\\\"|[^"])+"$/',
             str_replace("\\\\","",$local)))
         {
            $isValid = false;
         }
      }
      if ($isValid && !(checkdnsrr($domain,"MX") || checkdnsrr($domain,"A")))
      {
         // domain not found in DNS
         $isValid = false;
      }
   }
   return $isValid;
}
