<?
//$Id$
/**
 * Implementation of hook_menu()
 */
function grabbit_favorites_menu () {

  $items['favorites/save/facebook'] = array( 
    'page callback' => 'grabbit_favorites_facebook', 
    'access arguments' => array('access content')
  );

  $items['favorites/remove/facebook'] = array( 
    'page callback' => 'grabbit_favorites_facebook_remove', 
    'access arguments' => array('access content')
  );

  $items['trash/save/facebook'] = array( 
    'page callback' => 'grabbit_favorites_facebook_trash', 
    'access arguments' => array('access content')
  );

  $items['trash/remove/facebook'] = array( 
    'page callback' => 'grabbit_favorites_facebook_trash_remove', 
    'access arguments' => array('access content')
  );

  return $items;
}

function grabbit_favorites_get($type,$id){
	global $user;
	$uid=$user->uid;
	$result = db_query("SELECT * FROM {grabbit_favorites} WHERE uid=%d AND type='%s' AND id='%s'",$uid,$type,$id);
	if(db_affected_rows($result)){
		return TRUE;
	}else{
		return FALSE;
	}
}


function grabbit_favorites_get_all($type){
	global $user;
	$uid=$user->uid;
	$result = db_query("SELECT * FROM {grabbit_favorites} WHERE uid=%d AND type='%s'",$uid,$type);
	if(db_affected_rows($result)){
		return $result;
	}else{
		return FALSE;
	}
}

function grabbit_favorites_get_trash($type){
	global $user;
	$uid=$user->uid;
	$result = db_query("SELECT * FROM {grabbit_trash} WHERE uid=%d AND type='%s'",$uid,$type);
	if(db_affected_rows($result)){
		$return = array();
		while($arreglo = db_fetch_array($result)){
		  	$return[]=$arreglo['id'];
		}
		return $return;
	}else{
		return array();
	}
}

function grabbit_favorites_facebook(){
	global $user;
	$uid=$user->uid;
	$type=$_GET['type'];
	$nid=$_GET['nid'];
	$time=time();
  	db_query("INSERT INTO {grabbit_favorites} (uid,type,id, extra) VALUES (%d, '%s', '%s', '%s')",$uid,$type,$nid,$time);	
    $result = TRUE;
    print "all OK";	
}

function grabbit_favorites_facebook_remove(){
	global $user;
	$uid=$user->uid;
	$type=$_GET['type'];
	$nid=$_GET['nid'];
  	db_query("DELETE FROM {grabbit_favorites} where uid=%d AND type='%s' AND id='%s'",$uid,$type,$nid);	
    $result = TRUE;	
    print "all OK";
}

function grabbit_favorites_facebook_trash_remove(){
	global $user;
	$uid=$user->uid;
	$type=$_GET['type'];
	$id=$_GET['id'];
    db_query("DELETE FROM {grabbit_trash} where uid=%d AND type='%s' AND id='%s'",$uid,$type,$id);
    $result = TRUE;
   return "all OK";
}

function grabbit_favorites_facebook_trash(){
	global $user;
	$uid=$user->uid;
	$type=$_GET['type'];
	$id=$_GET['id'];
    db_query("INSERT INTO {grabbit_trash} (uid,type,id) VALUES (%d, '%s', '%s')",$uid,$type,$id);	
    $result = TRUE;
    $node = node_load($id);
    $terms=taxonomy_node_get_terms_by_vocabulary($node, 3, $key = 'tid');
    grabbit_favorites_tags_fav($user->uid,$terms,$action='del');
    return "all OK";
}

function grabbit_favorites_flag($action, $flag, $content_id, $account) {
  
   if ($flag->name == 'bookmarks') {      

      if ($action == 'unflag') {
        $node = node_load($content_id);
        $terms=taxonomy_node_get_terms_by_vocabulary($node, 3, $key = 'tid');

        grabbit_favorites_tags_fav($account->uid,$terms,'del');

      }
      if ($action == 'flag') {
	    $node = node_load($content_id);
        $terms=taxonomy_node_get_terms_by_vocabulary($node, 3, $key = 'tid');

        grabbit_favorites_tags_fav($account->uid,$terms,'add');        

      }
   }
}

function grabbit_favorites_tags_fav($account,$terms,$action='add'){
	$profile = content_profile_load('profile', $account);
	if($profile){
		switch($action){
			case 'add':
			
			  $tax = $profile->taxonomy;
			  $taxonomy = $tax + $terms;
			  $tags=array();
			
			  foreach($taxonomy as $tax) {
			    $taks .= $tax->name .', ';
			  }
			
			  $tags=$taxonomy;
			
			  taxonomy_node_save($profile,$tags);
			
			break;
			case 'del':
			
			  $taxo = $profile->taxonomy;
			  foreach($terms as $key => $term){
			    unset($taxo[$key]);	
			  }
			 
			  $tags=$taxo;

			  taxonomy_node_save($profile,$tags);
			
			break;
		}
		
	}
}