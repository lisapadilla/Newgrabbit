<?

/*

	$blocks['content'] = '<div class="panels-update-form_file" style="display:none">
	             <div class="panels-update-wraper_file">
	             <form id="yfrog-form" action="#" method="post"> 
				    <input type="file" size="10" id="media" class="form-file" name="media"/>
				     
				    <input type="submit" value="Upload" /> 
				</form>
	             </div></div>';

*/

/**
 * Implementation of hook_menu()
 */
function grabbit_uploads_menu()
{
  $items['yfrog/upload'] = array( 
    'page callback' => 'grabbit_uploads_file_form_getit', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['uploads/credentials'] = array( 
    'page callback' => 'grabbit_uploads_save_data', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  ); 
  $items['display/file'] = array( 
    'page callback' => 'grabbit_uploads_display_file', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

function grabbit_uploads_display_file(){
	$error="Oops! we could not find the file, check the URL and try again!";
	if ($_GET['file_id']){
		$result = db_query('SELECT * FROM {files} WHERE fid = %d', $_GET['file_id']);
		if (db_affected_rows($result)){
			$file=db_fetch_object($result);
			$ext = substr($file->filename, strrpos($file->filename, '.') + 1);
			switch($ext){
				case "mov":
				case "flv":
				  $output = swf($file->filepath, array('params' => array('width' => '430', 'height'=>'400')));
				break;
				default:
				  $output = theme('imagecache', 'image_uploads', $file->filepath, 'Grabbit Image', '');
				break;
			}
			return $output;
		}else{
			return $error;
		}
	 
	}else{
		return $error;
	}
}

class twitpic
{
  /* 
   * variable declarations
   */
  var $post_url='http://twitpic.com/api/upload';
  var $post_tweet_url='http://twitpic.com/api/uploadAndPost';
  var $url='';
  var $post_data='';
  var $result='';
  var $tweet='';
  var $return='';
 
/*
* @param1 is the array of data which is to be uploaded
* @param2 if passed true will display result in the XML format, default is false
* @param3 if passed true will update status twitter,default is false
*/
 
  function __construct($data,$return=false,$tweet=false)
  {
    $this->post_data=$data;
    if(empty($this->post_data) || !is_array($this->post_data)) //validates the data
      $this->throw_error(0);
    $this->display=$return;
    $this->tweet=$tweet;
 
  }
 
  function post()
  {
    $this->url=($this->tweet)?$this->post_tweet_url:$this->post_url; //assigns URL for curl request based on the nature of request by user
    $this->makeCurl();
  }
  private function makeCurl()
  {
    $curl = curl_init();
    curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 2);
    curl_setopt($curl, CURLOPT_HEADER, false);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($curl, CURLOPT_BINARYTRANSFER, 1);
    curl_setopt($curl, CURLOPT_URL, $this->url);
    curl_setopt($curl, CURLOPT_POST, 3);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $this->post_data);
    $this->result = curl_exec($curl);
    curl_close($curl);
    if($this->display)
    {
      $this->result ;
    }
 
  }
  private function throw_error($code) //handles few errors, you can add more
 
  {
    switch($code)
    {
      case 0:
        echo 'Think, you forgot to pass the data';
        break;
      default:
        echo 'Something just broke !!';
        break;
    }
    exit;
  }
} //class ends here


function grabbit_uploads_file_form_getit(){
    global $user;	

	// Code for Session Cookie workaround
	/*	if (isset($_POST["PHPSESSID"])) {
			session_id($_POST["PHPSESSID"]);
		} else if (isset($_GET["PHPSESSID"])) {
			session_id($_GET["PHPSESSID"]);
		}

		session_start();
*/
	// Check post_max_size (http://us3.php.net/manual/en/features.file-upload.php#73762)
		$POST_MAX_SIZE = ini_get('post_max_size');
		$unit = strtoupper(substr($POST_MAX_SIZE, -1));
		$multiplier = ($unit == 'M' ? 1048576 : ($unit == 'K' ? 1024 : ($unit == 'G' ? 1073741824 : 1)));

		if ((int)$_SERVER['CONTENT_LENGTH'] > $multiplier*(int)$POST_MAX_SIZE && $POST_MAX_SIZE) {
			exit(0);
		}

	// Settings
		$save_path = base_path() . "sites/default/files/uploads/";	// The path were we will save the file (getcwd() may not be reliable and should be tested in your environment)
		$upload_name = "files";
		$max_file_size_in_bytes = 2147483647;				// 2GB in bytes
		$extension_whitelist = array("jpeg","bmp","jpg","png","gif","mov","flv","mp3","pdf","doc","rtf","txt","csv","ppt","xls","JPG","JPEG");	// Allowed file extensions
		$valid_chars_regex = '.A-Z0-9_ !@#$%^&()+={}\[\]\',~`-';				// Characters allowed in the file name (in a Regular Expression format)

	// Other variables	
		$MAX_FILENAME_LENGTH = 260;
		$file_name = "";
		$file_extension = "";
		$uploadErrors = array(
	        0=>"There is no error, the file uploaded with success",
	        1=>"The uploaded file exceeds the upload_max_filesize directive in php.ini",
	        2=>"The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form",
	        3=>"The uploaded file was only partially uploaded",
	        4=>"No file was uploaded",
	        6=>"Missing a temporary folder"
		);


	// Validate the upload
		if (!isset($_FILES[$upload_name])) {
			exit(0);
		} else if (isset($_FILES[$upload_name]["error"]) && $_FILES[$upload_name]["error"] != 0) {
			exit(0);
		} else if (!isset($_FILES[$upload_name]["tmp_name"]) || !@is_uploaded_file($_FILES[$upload_name]["tmp_name"])) {
			exit(0);
		} else if (!isset($_FILES[$upload_name]['name'])) {
			
			exit(0);
		}

	// Validate the file size (Warning: the largest files supported by this code is 2GB)
		$file_size = @filesize($_FILES[$upload_name]["tmp_name"]);
		if (!$file_size || $file_size > $max_file_size_in_bytes) {
			HandleError("File exceeds the maximum allowed size");
			exit(0);
		}

		if ($file_size <= 0) {
			HandleError("File size outside allowed lower bound");
			exit(0);
		}


	// Validate file name (for our purposes we'll just remove invalid characters)
		$file_name = preg_replace('/[^'.$valid_chars_regex.']|\.+$/i', "", basename($_FILES[$upload_name]['name']));
		if (strlen($file_name) == 0 || strlen($file_name) > $MAX_FILENAME_LENGTH) {
			HandleError("Invalid file name");
			exit(0);
		}

	// Validate file extension
		$path_info = pathinfo($_FILES[$upload_name]['name']);
		$file_extension = $path_info["extension"];
		$is_valid_extension = false;
		foreach ($extension_whitelist as $extension) {
			if ($file_extension == $extension) {
				$is_valid_extension = true;
				break;
			}
		}
		if (!$is_valid_extension) {
			HandleError("Invalid file extension");
			exit(0);
		}

	// Validate file contents (extension and mime-type can't be trusted)
		/*
			Validating the file contents is OS and web server configuration dependant.  Also, it may not be reliable.
			See the comments on this page: http://us2.php.net/fileinfo

			Also see http://72.14.253.104/search?q=cache:3YGZfcnKDrYJ:www.scanit.be/uploads/php-file-upload.pdf+php+file+command&hl=en&ct=clnk&cd=8&gl=us&client=firefox-a
			 which describes how a PHP script can be embedded within a GIF image file.

			Therefore, no sample code will be provided here.  Research the issue, decide how much security is
			 needed, and implement a solution that meets the needs.
		*/


	// Process the file
		/*
			At this point we are ready to process the valid file. This sample code shows how to save the file. Other tasks
			 could be done such as creating an entry in a database or generating a thumbnail.

			Depending on your server OS and needs you may need to set the Security Permissions on the file after it has
			been saved.
		*/
		$dir = variable_get('file_directory_path', '')."/uploads";
		
		if ($file = custom_upload('files', array(), $dir, false)) {
			global $user;	
				$node = new stdClass();
				  $node->title = trim($user->name)."â€™s uploads";
				  $node->created = time();
				  $node->type = 'media';
				  $node->status = 0;
				  $node->comment = 2;
				  $node->uid = $user->uid;
				  $node->field_media[0]['value'] = $file->fid;
				
				  $ext = substr($file->filename, strrpos($file->filename, '.') + 1);
				  $node->field_media_type[0]['value']=$ext;
				
				node_save($node);
		
		print $node->nid;
		}else{
		exit(0);
		}
		/*if (!@move_uploaded_file($_FILES[$upload_name]["tmp_name"], $save_path.$file_name)) {
			print_r($save_path.$file_name);
			exit(0);
		}
*/
	// Return output to the browser (only supported by SWFUpload for Flash Player 9)

		exit(0);



}

//save comments on photos and on 140+ chars nodes
function grabbit_uploads_comment(&$a1, $op) {
  if ($op == 'insert' || $op == 'update') {
    $node = node_load($a1['nid']);
    $serialize=unserialize($node->field_media[0]['value']);
    if($serialize){
	  $node_image=$serialize['file'];
	  $comment=$a1;
	  $comment['nid']=$node_image;
	  comment_save($comment);
    }
  }

}


function custom_upload($source, $validators = array(), $dest = FALSE, $replace = FILE_EXISTS_RENAME) {
  global $user;
  static $upload_cache;

  // Add in our check of the the file name length.
  $validators['file_validate_name_length'] = array();

  // If a file was uploaded, process it.
  if (isset($_FILES['files'])) {
    // Check for file upload errors and return FALSE if a
    // lower level system error occurred.

    // Begin building file object.
    $file = new stdClass();
    $file->filename = file_munge_filename(trim(basename($_FILES['files']['name']), '.'), $extensions);
    $file->filepath = $_FILES['files']['tmp_name'];
    $file->filemime = file_get_mimetype($file->filename);

    // If the destination is not provided, or is not writable, then use the
    // temporary directory.
    if (empty($dest) || file_check_path($dest) === FALSE) {
      $dest = file_directory_temp();
    }

    $file->source = $source;
    $file->destination = file_destination(file_create_path($dest .'/'. $file->filename), $replace);
    $file->filesize = $_FILES['files']['size'];

    // Call the validation functions.
    $errors = array();
    foreach ($validators as $function => $args) {
      array_unshift($args, $file);
      // Make sure $file is passed around by reference.
      $args[0] = &$file;
      $errors = array_merge($errors, call_user_func_array($function, $args));
    }

    // Rename potentially executable files, to help prevent exploits.
    if (preg_match('/\.(php|pl|py|cgi|asp|js)$/i', $file->filename) && (substr($file->filename, -4) != '.txt')) {      
      $file->filemime = 'text/plain';
      $file->filepath .= '.txt';
      $file->filename .= '.txt';
      // As the file may be named example.php.txt, we need to munge again to
      // convert to example.php_.txt, then create the correct destination.
      $file->filename = file_munge_filename($file->filename, $extensions);
      $file->destination = file_destination(file_create_path($dest .'/'. $file->filename), $replace);
    }


    // Check for validation errors.
    if (!empty($errors)) {
      $message = t('The selected file %name could not be uploaded.', array('%name' => $file->filename));
      if (count($errors) > 1) {
        $message .= '<ul><li>'. implode('</li><li>', $errors) .'</li></ul>';
      }
      else {
        $message .= ' '. array_pop($errors);
      }
      return 0;
    }

    // Move uploaded files from PHP's upload_tmp_dir to Drupal's temporary directory.
    // This overcomes open_basedir restrictions for future file operations.
    $file->filepath = $file->destination;
    if (!move_uploaded_file($_FILES['files']['tmp_name'], $file->filepath)) {
      return 0;
    }

    // If we made it this far it's safe to record this file in the database.
    $file->uid = $user->uid;
    $file->status = FILE_STATUS_PERMANENT;
    $file->timestamp = time();
    drupal_write_record('files', $file);

    // Add file to the cache.
    $upload_cache[$source] = $file;
    return $file;
  }
  return 0;
}


function HandleError($message) {
//	header("HTTP/1.1 500 Internal Server Error");
	echo $message;
}

function findAttribute($object, $attribute) {
  foreach($object->attributes() as $a => $b) {
    if ($a == $attribute) {
      $return = $b;
    }
  }
  if($return) {
    return $return;
  }
}

function grabbit_uploads_save_data(){

  $user=$_POST['user'];
  $config['username']=$_POST['username'];
  $config['password']=$_POST['password'];
	
  $check = grabbit_uploads_get_uid($user);

  $savetodb = serialize($config);

  if(!$check){
    db_query("INSERT INTO {grabbit_uploads} (uid,config) VALUES (%d, '%s')",$user,$savetodb);	
    $result = '<form id="yfrog-form" action="#" method="post">
	                <input type="hidden" value="'.$user.'"/> 
				    <input type="file" size="10" id="media" class="form-file" name="media"/>	     
				    <input type="submit" value="Upload" /> 
				</form>';
  }
  else{
    db_query("UPDATE {grabbit_uploads} SET config='%s' WHERE uid=%d",$savetodb,$user);	
    $result = TRUE;
  }

  print $result;
  
}

function grabbit_uploads_get_uid($user){
	
  $result = db_query("SELECT * FROM {grabbit_uploads} WHERE uid = %d",$user);

  if ($user = db_fetch_object($result)) {
	$config = unserialize($user->config);
  }
  else{
    $config = FALSE;	
  }

  return $config;
}
