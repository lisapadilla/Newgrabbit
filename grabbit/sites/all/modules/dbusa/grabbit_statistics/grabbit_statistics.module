<?
//$Id$
/**
 * Implementation of hook_menu()
 */
function grabbit_statistics_menu () {

  $items['admin/custom/statistics'] = array( 
    'page callback' => 'grabbit_statistics_statistics', 
    'access arguments' => array('access content')
  );

  $items['admin/custom/detail/deals'] = array( 
    'page callback' => 'grabbit_statistics_detail_deals', 
    'access arguments' => array('access content')
  );

  $items['statistics/save/deal'] = array( 
    'page callback' => 'grabbit_statistics_save_deal', 
    'access arguments' => array('access content')
  );

  return $items;
}

function grabbit_statistics_detail_deals(){
	$us=arg(4);
	$users=user_load(array('uid'=>$us));
	
	$output = '<div class="user-details">This are the deals that the user '.$users->name.' has clicked:</div>';
	$result = db_query("SELECT * FROM {grabbit_statistics} WHERE uid=%d AND type='deal'",$us);	
    
    $header = array(t('Deal URL'), 
                    t('Deal price'));
    $rows = array();
    while($deals=db_fetch_object($result)){
	  $row=array( $deals->extra, $deals->number );
	  $rows[]=$row; 
    }
    $output .= theme('table', $header, $rows,array('class' => 'deals-table'));
	return $output;
}

function grabbit_statistics_statistics(){
	
	
	drupal_add_js(drupal_get_path('module', 'grabbit_statistics').'/sorttable.js', $type = 'module');
	$output .='<div class="admin-panel"><h3>Users Statistics</h3><div class="body"><p class="description"></p>';
	$output .=grabbit_statistics_number_users();
	$output .='</div></div>';
	$output .='<div class="admin-panel"><h3>Deals/Friends Statistics</h3><div class="body"><p class="description"></p>';
	$output .=grabbit_statistics_deals_total();
	$output .='</div></div>';
	$output .=grabbit_statistics_members_and_friends();
	
	return $output;
}

function grabbit_statistics_members_and_friends(){
	
	$result = db_query("SELECT * from {users} where uid>0");

    $header = array(t('User'), 
                    t('Friends'),
                    t('Total RT (all time)'),
                    t('Total RT (today)'),
                    t('Total Post (all time)'), 
                    t('Total Post (today)'),
                    t('Friends added (today)'),
                    t('Deals clicked'));
    $rows = array();
	$users=0;
	$d_total=0;
	$totales_d=0;
	while($requester = db_fetch_object($result)){
	  $total = friendlist_api_db_statuses('count', $requester->uid, NULL, NULL, 'TW_BOTH');
	  $users++;
	  $sum=$sum+$total;
	  $total_post = grabbit_statistics_post_get_total($requester->uid,'all');
	  $total_post_today = grabbit_statistics_post_get_total_today($requester->uid,'all');
	  $total_rt = grabbit_statistics_post_get_total($requester->uid,'RT');
	  $total_rt_today = grabbit_statistics_post_get_total_today($requester->uid,'RT');
	  $today_friends=grabbit_statistics_post_get_friends_today($requester->uid);
	  $deals=grabbit_statistics_deals_get_total($requester->uid,$d_total,$totales_d);
	  $row = array(l($requester->name,'user/'.$requester->uid), 
	                 $total,
	                 $total_rt,
	                 $total_rt_today, 
	                 $total_post, 
	                 $total_post_today,
	                 $today_friends,
	                 l($deals,'admin/custom/detail/deals/'.$requester->uid));
	  $rows[]=$row;
	}
	
	$average=$sum/$users;
	$average_deals=$d_total/$totales_d;
	$output .='<br>Average friends per user: '.$average;
	
	$output .='<br>Average Deals Price clicked: '.$average_deals;
     
    $output .='<br><br><div class="admin-panel"><h3>All Statistics</h3><div class="body"><p class="description">You can sort this table by clicking the headers</p>';
    $output .= theme('table', $header, $rows,array('class' => 'sortable'));
    $output .='</div></div>';

    return $output;
}

function grabbit_statistics_deals_total(){
	
	$result = db_query("SELECT * from {node} where type='deal'");

    $output = "There are currently ".db_affected_rows($result)." deals in the database";

    return $output;
}

function grabbit_statistics_number_users(){
  	$number = db_result(db_query('SELECT COUNT(uid) AS number FROM {users} WHERE status=1'));
	if (user_access('access content')) {
	  // Count users with activity in the past defined period.
	  $time_period = variable_get('user_block_seconds_online', 900);

	  // Perform database queries to gather online user lists.
	  $guests = db_fetch_object(db_query('SELECT COUNT(sid) AS count FROM {sessions} WHERE timestamp >= %d AND uid = 0', time() - $time_period));
	  $users = db_query('SELECT uid, name, access FROM {users} WHERE access >= %d AND uid != 0 ORDER BY access DESC', time() - $time_period);
	  $total_users = db_affected_rows($users);

	  // Format the output with proper grammar.
	  
	  if ($total_users == 1 && $guests->count == 1) {
	    $output = t('%members and %visitors online.', array('%members' => format_plural($total_users, 'there is currently 1 user', 'there are currently @count users'), '%visitors' => format_plural($guests->count, '1 guest', '@count guests')));
	  }
	  else {
	    $output = t('there are currently %members and %visitors online.', array('%members' => format_plural($total_users, '1 user', '@count users'), '%visitors' => format_plural($guests->count, '1 guest', '@count guests')));
	  }
      $output .= "<br>Out of $number registered users ";
	  // Display a list of currently online users.
	  $max_users = variable_get('user_block_max_list_count', 10);
	  if ($total_users && $max_users) {
	    $items = array();

	    while ($max_users-- && $account = db_fetch_object($users)) {
	      $items[] = $account;
	    }

	    $output .= theme('user_list', $items, t('Online users'));
	  }
	}
	return $output;
}

function grabbit_statistics_post_entry($uid,$type){
	
	$day=date('d-m-Y');
	db_query("INSERT INTO {grabbit_statistics} (uid,type,extra) VALUES (%d,'%s','%s')",$uid,$type,$day);

}

function grabbit_statistics_deals_entry($uid,$deal,$price){
	
	$day=date('d-m-Y');
	db_query("INSERT INTO {grabbit_statistics} (uid,type,extra,number) VALUES (%d,'deal','%s','%s')",$uid,$deal,$price);

}


function grabbit_statistics_deals_get_total($uid,&$d_total,&$totales_d){
	
	$result = db_query("SELECT * FROM {grabbit_statistics} WHERE uid=%d AND type='deal'",$uid);	
    $total = db_affected_rows($result);
    while($total_d=db_fetch_object($result)){
	    $d_total=$d_total+$total_d->number;
	    $totales_d++;
    }
    return $total;

}

function grabbit_statistics_post_get_total($uid,$type){
	if($type=='RT'){
	  $result = db_query("SELECT * FROM {grabbit_statistics} WHERE uid=%d AND type='RT'",$uid);	
	}else{
	  $result = db_query("SELECT * FROM {grabbit_statistics} WHERE uid=%d AND type!='RT'",$uid);
	}
	
    $total = db_affected_rows($result);
    return $total;

}

function grabbit_statistics_post_get_total_today($uid,$type){
	
	$day=date('d-m-Y');
	if($type=='RT'){
		$result = db_query("SELECT * FROM {grabbit_statistics} WHERE uid=%d AND extra='%s' AND type='RT'",$uid,$day);
	}else{
		$result = db_query("SELECT * FROM {grabbit_statistics} WHERE uid=%d AND extra='%s' AND type!='RT'",$uid,$day);
	}
	$total = db_affected_rows($result);
    return $total;

}
    
function grabbit_statistics_post_get_friends_today($uid){
	$day=date('d-m-Y');
	
	$result = db_query("SELECT * FROM friendlist_statuses fs WHERE 1 = 1 AND fs.requester_id = %d AND fs.status LIKE 'TW_BOTH' AND DATE_FORMAT(FROM_UNIXTIME(last_update_time),'%%d-%%m-%%Y')='%s'",$uid,$day);
    return db_affected_rows($result);
}

function grabbit_statistics_save_deal(){
	global $user;
	$deal=$_GET['deal'];
	$price=$_GET['price'];
	//grabbit_statistics_deals_entry($user->uid,$deal,$price);
	
	return 'allgood';
}

function grabbit_statistics_save_deal_prog($deal='NONE',$price='NONE'){
	global $user;
	
	grabbit_statistics_deals_entry($user->uid,$deal,$price);
	
	return 'allgood';
}

